// Leetcode 78
// Subsets
// https://leetcode.com/problems/subsets/

// Given a set of distinct integers, nums, return all possible subsets.
// 
// Note:
// Elements in a subset must be in non-descending order.
// The solution set must not contain duplicate subsets.
// For example,
// If nums = [1,2,3], a solution is:
// 
// [
//   [3],
//   [1],
//   [2],
//   [1,2,3],
//   [1,3],
//   [2,3],
//   [1,2],
//   []
// ]
import tester.Tester;

import java.util.*;

public class Solution {
	List<List<Integer>> allSubSets;
	
    public List<List<Integer>> subsets(int[] nums) {
    	allSubSets = new ArrayList<List<Integer>>();
    	ArrayList<Integer> subsetPrevPart = new ArrayList<Integer>();
        subsetsHelper(subsetPrevPart, nums, 0);
        return allSubSets;
    }
    
    // GIVEN: a list of numbers subsetPrevPart represents a subset of 
    // nums[0:start] which which means the numbers in nums with indexs belong 
    // to [0: start)
    // EFFECT: add all subsets of nums that contain subsetPrevPart to allSubSets
    // TERMINATION: the value of nums.length - start becomes smaller
    public void subsetsHelper(ArrayList<Integer> subsetPrevPart, int[] nums, int start) {
    	if(start == nums.length) {
    		ArrayList<Integer> subset = new ArrayList<Integer>();
    		subset.addAll(subsetPrevPart);
    		allSubSets.add(subset);
    	}
    	else {
    		subsetsHelper(subsetPrevPart, nums, start + 1);
    		subsetPrevPart.add(nums[start]);
    		subsetsHelper(subsetPrevPart, nums, start + 1);
    		subsetPrevPart.remove(subsetPrevPart.size() - 1);
    	}
    }   
}

class SolutionExamples {
	Solution s = new Solution();
	// tests for method subsets()
	boolean testSubsets(Tester t) {
		System.out.println(s.subsets(new int[]{}));
		return
		true;
	}
}
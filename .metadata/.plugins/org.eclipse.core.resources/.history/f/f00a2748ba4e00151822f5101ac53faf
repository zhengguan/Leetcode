// Leetcode 37	
// Sudoku Solver
// https://leetcode.com/problems/sudoku-solver/

// Write a program to solve a Sudoku puzzle by filling the empty cells.
// 
// Empty cells are indicated by the character '.'.
// 
// You may assume that there will be only one unique solution.
// 
// 
// A sudoku puzzle...
// 
// 
// ...and its solution numbers marked in red.


public class Solution {
    Board board;
    
    // GIVEN: the state of a sudoku board
    // EFFECT: fill in the empty cells
    public void solveSudoku(char[][] board) {
    	this.board = new Board(board);
    	helper(0, 0);  	
    }
    
    // GIVEN: the state of a sudoku board and the coordinates of a start 
    // position
    // WHERE: ((row * 9) + col) represents the number of cells that have been 
    // filled
    // EFFECT: fill in empty cells start at the given one
    // RETURNS: true iff filled all empty cells successfully
    // EXAMPLE: helper(board, 1, 1) fills in cells (row, col) that 
    // ((row == 1) && (col >= 1)) || (row > 1)
    public boolean helper(int row, int col) {
    	if(row * 9 + col >= 81) {
    		//@assert all cells have been filled
    		return true;
    	}
    	else {
    		for(int i = 1; i <= 9; i++) {
    			if(!board.alreadyExists(i, row, col)) {
    				setBoardAndMark(i, row, col);
    				
    				if(helper(board, row + (col + 1) / 9, (col + 1) % 9)) {
    					return true;
    				} else {
    					unsetBoardAndMark(row, col);
    				}
    			}
    		}
    	}
    }

    
    // GIVEN: a value and a position of the sudoku board
    // EFFECT: set the cell at the given position the given value and     
    // set corresponding mark 
    private void setBoardAndMark(int value, int row, int col) {
    	
    }
    
    // GIVEN: a value and a position of the sudoku board
    // EFFECT: unset the cell at the given position the given value and     
    // set corresponding mark 
    private void unsetBoardAndMark(int row, int col) {
    	
    }
}

class Board {
	// markRow[i][j] represents whether j + 1 has appeared in the ith row
    boolean[][] markRow;
	// markCol[i][j] represents whether j + 1 has appeared in the ith col        
    boolean[][] markCol;
	// markCol[i][j] represents whether j + 1 has appeared in the ith square        
    boolean[][] markSqare;
    char[][] board;    
    
    Board(char[][] board) {
    	this.board = board;
        this.markRow = new boolean[9][9];        
        this.markCol = new boolean[9][0];      
        this.markSqare = new boolean[9][0];    	
    }    
    
    // GIVEN: a value and a position of the sudoku board
    // WHERE: 1 <= value && value <= 9 
    // && 0 <= row && row < 9 && 0 <= col && col < 9;
    // RETURNS: true iff the value already exists in the same 
    // row/column/square)
    public boolean alreadyExists(int value, int row, int col) {
    	
    }
    
    // GIVEN: a value and a position of the sudoku board
    // WHERE: 1 <= value && value <= 9 
    // && 0 <= row && row < 9 && 0 <= col && col < 9;
    // EFFECT: set the cell at the given position the given value and     
    // set corresponding mark 
    public void setBoardAndMark(int value, int row, int col) {
    	
    }
    
    // GIVEN: a value and a position of the sudoku board
    // WHERE: 0 <= row && row < 9 && 0 <= col && col < 9;
    // EFFECT: unset the cell at the given position the given value and     
    // set corresponding mark 
    public void unsetBoardAndMark(int row, int col) {
    	
    }
	
}
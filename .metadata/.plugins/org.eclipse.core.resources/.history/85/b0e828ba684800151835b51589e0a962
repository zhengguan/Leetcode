// Leetcode 173	
// Binary Search Tree Iterator
// https://leetcode.com/problems/binary-search-tree-iterator/

// Implement an iterator over a binary search tree (BST). Your iterator will 
// be initialized with the root node of a BST.
// 
// Calling next() will return the next smallest number in the BST.
// 
// Note: next() and hasNext() should run in average O(1) time and uses O(h) 
// memory, where h is the height of the tree.

import tester.Tester;

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}


public class BSTIterator {

    public BSTIterator(TreeNode root) {
        
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        
    }

    /** @return the next smallest number */
    public int next() {
        
    }
    
    private void traversal(TreeNode root) {
    	if (root == null) {
    		return;
    	}
    	else {
    		Stack<TreeNode> stack = new Stack<TreeNode>();
    		TreeNode node = root;
    		while (!stack.isEmpty() || node != null) 
    		//@loop_invariant stack contains all of the parents of current tree
    		//@loop_invariant is the current node to be processed  
    		{
    			while (node != null) {
    				stack.push(node);
    				node = node.left;
    			}
    			node = stack.pop();
    			/* process(node); */
    			node = node.right;
    		}
    		return;
    	}
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
// Leetcode 60	
// Permutation Sequence
// https://leetcode.com/problems/permutation-sequence/

// The set [1,2,3,бн,n] contains a total of n! unique permutations.
// 
// By listing and labeling all of the permutations in order,
// We get the following sequence (ie, for n = 3):
// 
// "123"
// "132"
// "213"
// "231"
// "312"
// "321"
// Given n and k, return the kth permutation sequence.
// 
// Note: Given n will be between 1 and 9 inclusive.
import tester.Tester;

import java.util.*;

public class Solution {
    public String getPermutation(int n, int k) {
        char[] cs = this.getArray(n);
        ArrayList<String> allPermutations = this.getPermutationOfArray(cs);
        Collections.sort(allPermutations);
        return allPermutations.get(k - 1);
    }
    
    // RETURNS: an array of length n, with value from 1 to n
    public char[] getArray(int n) {
    	char[] cs = new char[n];
    	for(int i = 0; i < n; i++) {
    		cs[i] = (char)('0' + (i + 1));
    	}
    	return cs;
    }
    
    // RETURNS: a list of all permutations of the given array with each one 
    // stored as a String
    public ArrayList<String> getPermutationOfArray(char[] cs) {
    	ArrayList<String> allPermutation = new ArrayList<String>();
    	getPermutationOfArrayHelper(allPermutation, cs, 0);
    	return allPermutation;
    }
    
    // EFFECT: store all permutations of the given array in the given list,
    // with each one stored as a String
    public void getPermutationOfArrayHelper(ArrayList<String> allPermutation, 
    		char[] cs, int start) {
    	if(start == cs.length - 1) {
    		allPermutation.add(cs.toString());
    	}
    	else {
    		for(int i = start; i < cs.length; i++) {
    			swap(cs, start, i);
    			getPermutationOfArrayHelper(allPermutation, cs, start + 1);
    			swap(cs, start, i);
    		}
    	}
    }
    
    // EFFECT: swap the value of nums[i] and nums[j]
    public void swap(char[] nums, int i, int j) {
    	char tmp = nums[i];
    	nums[i] = nums[j];
    	nums[j] = tmp;
    }
}

class SolutionExamples {
	Solution s = new Solution();
	
	boolean testGetPermutaion(Tester t) {
		System.out.println(s.getPermutation(2, 1));
		return
//		t.checkExpect(s.getPermutation(1, 1), new String("1")) &&
		t.checkExpect(s.getPermutation(2, 1), "12") &&
		t.checkExpect(s.getPermutation(3, 3), "213");
	}
}
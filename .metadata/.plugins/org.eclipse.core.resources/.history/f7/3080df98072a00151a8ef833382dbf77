// Leetcode 59	
// Spiral Matrix II
// https://leetcode.com/problems/spiral-matrix-ii/

// Given an integer n, generate a square matrix filled with elements from 1 to 
// n2 in spiral order.
// 
// For example,
// Given n = 3,
// 
// You should return the following matrix:
// [
//  [ 1, 2, 3 ],
//  [ 8, 9, 4 ],
//  [ 7, 6, 5 ]
// ]

import tester.Tester;

import java.util.*;

public class Solution {
    public int[][] generateMatrix(int n) {
    	n = Math.abs(n);
        int[][] matrix = new int[n][n];
        int number = 1;
        int start = 0; //(start, start) is the start position
        int end = n;   // 
        while(number <= n * n) {
            for(int j = start; j < end; j++) {
            	matrix[start][j] = number++;
            }
            for(int i = start; i < end; i++) {
            	matrix[i][end - 1] = number++;
            }
            for(int j = end - 1; j >= start; j--) {
            	matrix[end - 1][j] = number++;
            }
            for(int i = end - 1; i >= start; i--) {
            	matrix[i][start] = number++;
            }
            start++;
            end--;
        }
        return matrix;
    }
}

class SolutionExamples {
	Solution s = new Solution();
	
	// tests for method generateMatrix()
	boolean testGenerateMatrix(Tester t) {
		return
		t.checkExpect(s.generateMatrix(1), new int[][]{{1}}) &&
		t.checkExpect(s.generateMatrix(-1), new int[][]{{1}}) &&
		t.checkExpect(s.generateMatrix(2), 
				new int[][]{{1, 2},
							{4, 3}}) &&
		t.checkExpect(s.generateMatrix(4),
				new int[][]{{1, 2, 3},
							{8, 9, 4},
							{7, 6, 5}});
	}
}
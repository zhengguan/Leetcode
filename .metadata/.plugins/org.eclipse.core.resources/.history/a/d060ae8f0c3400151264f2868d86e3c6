// Leetcode 123
// Best Time to Buy and Sell Stock III
// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

// Say you have an array for which the ith element is the price of a given stock 
// on day i.
// 
// Design an algorithm to find the maximum profit. You may complete as many 
// transactions as you like (ie, buy one and sell one share of the stock multiple
// times). However, you may not engage in multiple transactions at the same time 
// (ie, you must sell the stock before you buy again).

import tester.Tester;

public class Solution {
    public int maxProfit(int[] prices) {
    	if(prices.length == 0) {
    		return 0;
    	}
        return maxProfitFrom(prices, 0);
    }
    
    // GIVEN: an array whose ith element is the price of a given stock on day 
    // i and an int represents the start day
    // WHERE: 0 <= start && start <= prices.length; 
    // RETURNS: the maximum profit can get if start doing transaction from day
    // start
    public int maxProfitFrom(int[] prices, int start) {
    	if(prices.length - start <= 1) {
    		return 0;
    	}
    	else {
    		int profit = 0;
    		for(int i = start; i < prices.length; i++) {
    			for(int j = i + 1; j < prices.length; j++) {
    				int tmpProfit = prices[j] - prices[i];
    				profit = Math.max(profit, 
    						tmpProfit + this.maxProfitFrom(prices, j + 1));
    			}
    		}
    		return profit;
    	}
    }
}


class SolutionExamples {
	Solution s = new Solution();
	
	// tests for method maxProfit()
	boolean testMaxProfit(Tester t) {
		return
		t.checkExpect(s.maxProfit(new int[]{1, 2}), 1) &&
		t.checkExpect(s.maxProfit(new int[]{1, 2, 1, 2}), 2) &&
		t.checkExpect(s.maxProfit(new int[]{1, 2, 5, 4}), 4);
	}
}


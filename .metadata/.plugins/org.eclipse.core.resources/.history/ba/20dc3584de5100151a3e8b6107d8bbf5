// Leetcode 31
// Next Permutation
// https://leetcode.com/problems/next-permutation/

/*

Implement next permutation, which rearranges numbers into the lexicographically 
next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest 
possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its 
corresponding outputs are in the right-hand column.
1,2,3 ¡ú 1,3,2
3,2,1 ¡ú 1,2,3
1,1,5 ¡ú 1,5,1

*/


public class Solution {
    public void nextPermutation(int[] nums) {
        int s = 0, e = 0;
        for(int i = 0; i < nums.length; i++) {
        	for(int j = i + 1; j < nums.length; j++) {
        		if(nums[j] > nums[i]) {
        			s = i;
        			e = j;
        		}
        	}
        }
        if(s == 0 && e == 0) {
        	reverse(nums, 0, nums.length);
        	return;
        }
        else {
        	swap(nums, s, e);
        	return;
        }
    }
    
    // EFFECT: swap the value of nums[i] and nums[j]
    private void swap(int[] nums, int i, int j) {
    	int tmp = nums[i];
    	nums[i] = nums[j];
    	nums[j] = tmp;
    }
    
    // EFFECT: reverse sub-array nums[start, end)
    private void reverse(int[] nums, int start, int end) {
    	while(start < end) {
    		swap(nums, start, end - 1);
    		start++;
    		end--;
    	}
    }
}
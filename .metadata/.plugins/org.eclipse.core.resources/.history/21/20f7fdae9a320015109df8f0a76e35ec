// Leetcode 74
// Search a 2D Matrix
// https://leetcode.com/problems/search-a-2d-matrix/

// Write an efficient algorithm that searches for a value in an m x n matrix. This 
// matrix has the following properties:
// 
// Integers in each row are sorted from left to right.
// The first integer of each row is greater than the last integer of the previous 
// row.
// For example,
// 
// Consider the following matrix:
// 
// [
//   [1,   3,  5,  7],
//   [10, 11, 16, 20],
//   [23, 30, 34, 50]
// ]
// Given target = 3, return true.

import tester.Tester;

import java.util.Arrays;

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;
        for(int i = 0; i < row; i++) {
        	int targetIndex = Arrays.binarySearch(matrix[i], target);
        	if(targetIndex != -1) {
        		return true;
        	}
        }
        return false;
    }
}

class SolutionExamples {
	Solution s = new Solution();
	
	// tests for searchMatrix()
	boolean testSearchMatrix(Tester t) {
		return
		t.checkExpect(s.searchMatrix(new int[][] {{1, 3, 5, 7},
												  {10, 11, 16, 20},
												  {23, 30, 34, 50}}, 
									 3), 
					  true);
	}
}
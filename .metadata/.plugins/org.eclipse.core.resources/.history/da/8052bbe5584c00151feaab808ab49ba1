// Leetcode 47	
// Permutations II
// https://leetcode.com/problems/permutations-ii/

// Given a collection of numbers that might contain duplicates, return all 
// possible unique permutations.
// 
// For example,
// [1,1,2] have the following unique permutations:
// [1,1,2], [1,2,1], and [2,1,1].

import java.util.*;

public class Solution {
	private List<List<Integer>> result;
	
	/**
	 * 
	 * @param nums
	 * @return all unique permutations of ints in the given array
	 */
    public List<List<Integer>> permuteUnique(int[] nums) {
    	result = new ArrayList<List<Integer>>();
        List<Integer> l = arrayToList(nums);          
        permuteUniqueHelper(nums, 0);
        return result;
    }
    
    /**
     * 
     * @param nums
     * @return a list representation of nums
     */
    static public List<Integer> arrayToList(int[] nums) {
    	List<Integer> l = new ArrayList<Integer>();
    	for(int i = 0; i < nums.length; i++) {
    		l.add(nums[i]);
    	}
    	return l;
    }
    
    /**
     * 
     * @param nums
     * @param start
     * EFFECT: permute nums[start,nums.length), for each permutation add a 
     * list corresponding to the state of nums to this.result. 
     */
    private void permuteUniqueHelper(int[] nums, int start) {
    	
    }
}
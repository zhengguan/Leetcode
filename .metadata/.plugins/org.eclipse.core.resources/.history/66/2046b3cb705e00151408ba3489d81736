// Leetcode 142	
// Linked List Cycle II
// https://leetcode.com/problems/linked-list-cycle-ii/


class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
    
    // RETURNS: the ith node in the list
    public ListNode get(int i) {
    	if (i == 0) {
    		return this;
    	}
    	else if (i > 0 && next != null) {
    		return this.next.get(i -1);    				
    	}
    	else {
    		throw new RuntimeException("ListNode: get from null");
    	}
    }
}

public class Solution {
    public ListNode detectCycle(ListNode head) {
        if ((head == null) || (head.next == null)) return null;

        ListNode hare = head;
        ListNode tortoise = head;
        while (true) {
            hare = hare.next.next;
            tortoise = head.next;
            if (hare == tortoise) break;
            if (hare.next == null || hare.next.next == null) return null;
            else hare = hare.next.next;
        }
        //@assert hare == tortoise;
        
        hare = head;
        while (hare != tortoise) {
            hare = hare.next;
            tortoise = tortoise.next;
        }
        return hare;
    }
}
// Leetcode 46
// Permutations
// https://leetcode.com/problems/permutations/

// Given a collection of numbers, return all possible permutations.
// 
// For example,
// [1,2,3] have the following permutations:
// [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

import tester.Tester;
import java.util.*;

public class Solution {
	List<List<Integer>> result = new ArrayList<List<Integer>>();
	
	// EFFECT: add all permutations of nums to result
	// RETURNS: result
    public List<List<Integer>> permute(int[] nums) {
        permuteHelper(nums, 0);
        return result;
    }
    
    // WHERE: 0 <= start && start <= nums.length;
    // EFFECT: add all permutations of nums[start,) to result, for each
    // permutation add nums[0, start) to the beginning.
    public void permuteHelper(int[] nums, int start) {
    	if (start == nums.length) {
//    		nums.
    		result.addAll(Arrays.asList(nums));
    	}
    }
}
